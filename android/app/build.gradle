def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    namespace "com.will.ai.flutter_flavor_demo_bywill"
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.will.ai.flutter_flavor_demo_bywill"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }

    //    开发环境：
    def API_DEV = 0
    //    测试环境：
    def API_TEST = 1
    //   灰度环境：
    def API_GRAY = 2
    //    正式环境：
    def API_PRODUCT = 3

    flavorDimensions "env"

    productFlavors {

        forDev {
            manifestPlaceholders = [app_icon: "@mipmap/ic_launcher"]
            resValue "string", "app_name", "Will Dev"
            applicationIdSuffix ".dev"
            buildConfigField "int", "API_HOST", "${API_DEV}"
            dimension "env"
        }
        forTest{
            manifestPlaceholders = [app_icon: "@mipmap/ic_launcher"]
            resValue "string", "app_name", "Will Test"
            applicationIdSuffix ".test"
            buildConfigField "int", "API_HOST", "${API_TEST}"
            dimension "env"
        }
        forGray {
            manifestPlaceholders = [app_icon: "@mipmap/ic_launcher"]
            resValue "string", "app_name", "Will Gray"
            applicationIdSuffix ".gray"
            buildConfigField "int", "API_HOST", "${API_GRAY}"
            dimension "env"
        }
        forProduct {
            manifestPlaceholders = [app_icon: "@mipmap/ic_launcher"]
            resValue "string", "app_name", "Will Pro"
            buildConfigField "int", "API_HOST", "${API_PRODUCT}"
            dimension "env"
        }
    }

}

flutter {
    source '../..'
}
